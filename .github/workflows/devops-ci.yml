name: DevOps CI Pipeline

on:
  push:
    branches:
      - "main"
      - "docker-compose-setup"
  pull_request:
    branches:
      - "main"

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # ---------- 1Ô∏è‚É£ Checkout DevOps repo ----------
      - name: Checkout DevOps Repo
        uses: actions/checkout@v4

      # ---------- 2Ô∏è‚É£ Clone Frontend & Backend ----------
      - name: Clone Frontend Repo
        run: |
          git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/Elilaw179/bejitetest.git ./Bejitetest

      - name: Clone Backend Repo
        run: |
          git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/solprogroup/Bejite_UX_2025.git ./Bejite_UX_2025

      # ---------- 3Ô∏è‚É£ Set up Docker ----------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ---------- 4Ô∏è‚É£ Build and Run Containers ----------
      - name: Build and Run Services
        run: |
          echo "üöÄ Building and starting containers..."
          docker compose -f docker-compose.ci.yml up --build -d
          echo "‚úÖ Containers started successfully"
          docker ps -a

      # ---------- 5Ô∏è‚É£ Wait for DB health check ----------
      - name: Wait for Database to be healthy
        run: |
          echo "‚è≥ Waiting for PostgreSQL to be ready..."
          sleep 15
          docker logs $(docker ps -qf name=db) || true

      # ---------- 6Ô∏è‚É£ Verify Backend Connection ----------
      - name: Verify Backend Connection to DB
        run: |
          echo "üîç Checking backend logs for PostgreSQL connection..."
          docker logs $(docker ps -qf name=backend) | grep -E "PostgreSQL|connected" || true

      # ---------- 7Ô∏è‚É£ (Optional) Run Integration Tests ----------
      # - name: Run integration tests
      #   run: |
      #     curl -f http://localhost:5000/health || exit 1

      # ---------- 8Ô∏è‚É£ Upload Logs on Failure ----------
      - name: Upload Docker Logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: |
            $(docker logs $(docker ps -qf name=backend) > backend.log)
            $(docker logs $(docker ps -qf name=db) > db.log)
            backend.log
            db.log

      # ---------- 9Ô∏è‚É£ Stop and Clean Up ----------
      - name: Stop and Clean Up
        if: always()
        run: |
          echo "üßπ Cleaning up..."
          docker compose -f docker-compose.ci.yml down -v
